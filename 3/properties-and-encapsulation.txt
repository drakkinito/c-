Кроме обычных методов в языке C# предусмотрены специальные методы доступа, которые называют свойства. Они обеспечивают простой доступ к полям класса, узнать их значение или выполнить их установку.

Стандартное описание свойства имеет следующий синтаксис:
     static void Main(string[] args)
        {
            Person person = new Person();
            person.Name = "dima";
            person.Age = 18;
            Console.WriteLine("Name: " + person.Name);
            Console.WriteLine("Age: " + person.Age);

            Console.ReadKey();
        }
    
    class Person
    {
        private string name;
    
        public string Name
        {
            get
            {
                return name;
            }
    
            set
            {
                name = value;
            }
        }
    }

Возможно, может возникнуть вопрос, зачем нужны свойства, если мы можем в данной ситуации обходиться обычными полями класса?
Но свойства позволяют вложить дополнительную логику, которая может быть необходима, например, при присвоении переменной класса какого-либо значения.
Например, нам надо установить проверку по возрасту:
    private int age;
    internal int Age
    {
        get { return age; }
        set {
            if(value > 0 && value < 90)
                age = value;
        }
    }

Модификаторы доступа
Мы можем применять модификаторы доступа не только ко всему свойству, но и к отдельным блокам - либо get, либо set:    
    class Person
    {
        private string name;
     
        public string Name
        {
            get { return name; }
     
            private set { name = value; }
        }
        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }
    }
Теперь закрытый блок set мы сможем использовать только в данном классе - в его методах, свойствах, конструкторе, но никак не в другом классе:
Person p = new Person("Tom", 24);
 
// Ошибка - set объявлен с модификатором private
//p.Name = "John";
 
Console.WriteLine(p.Name);

При использовании модификаторов в свойствах следует учитывать ряд ограничений:

Модификатор для блока set или get можно установить, если свойство имеет оба блока (и set, и get)

Только один блок set или get может иметь модификатор доступа, но не оба сразу

Модификатор доступа блока set или get должен быть более ограничивающим, чем модификатор доступа свойства. Например, если свойство имеет модификатор public,
то блок set/get может иметь только модификаторы protected internal, internal, protected, private


Автоматические свойства
    // через конструктор 
    class Program
    {
        static void Main(string[] args)
        {
            Person person = new Person("Tom", 23);
            Console.WriteLine(person.Name); // Tom
            Console.WriteLine(person.Age);  // 23
            
            Console.Read();
        }
    }
    class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
            
        public Person(string name, int age)
        {
            Name = name;
            Age = age;
        }
    }

    // Значення по замовчуванню
    class Person
    {
        public string Name { get; set; } = "Tom";
        public int Age { get; set; } = 23;
    }
         
    class Program
    {
        static void Main(string[] args)
        {
            Person person = new Person();
            Console.WriteLine(person.Name); // Tom
            Console.WriteLine(person.Age);  // 23
             
            Console.Read();
        }
    }