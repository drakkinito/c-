Наряду с классами структуры представляют еще один способ создания собственных типов данных в C#. 
Более того многие примитивные типы, например, int, double и т.д., по сути являются структурами.

struct User
{
    public string name;
    public int age;
 
    public void DisplayInfo()
    {
        Console.WriteLine($"Name: {name}  Age: {age}");
    }
}

class Program
    {
        static void Main(string[] args)
        {
            User tom;
            tom.name = "Tom";
            tom.age = 34;
            tom.DisplayInfo();
             
            Console.ReadKey();
        }
    }

Конструкторы структуры

Однако если мы таким образом создаем объект структуры, то обязательно надо проинициализировать все поля (глобальные переменные)
структуры перед получением их значений или перед вызовом методов структуры. То есть, например, в следующем случае мы получим ошибку, 
так как обращение к полям и методам происходит до присвоения им начальных значений:
User tom;
int x = tom.age;    // Ошибка
tom.DisplayInfo();  // Ошибка

Также мы можем использовать для создания структуры конструктор по умолчанию, при вызове которого полям структуры будет присвоено значение по умолчанию 
(например, для числовых типов это число 0):

User tom = new User();
tom.DisplayInfo();  // Name:   Age: 0

Также мы можем определить свои конструкторы. Например, изменим структуру User:

using System;
using System.Reflection;
 
namespace HelloApp
{
    struct User
    {
        public string name;
        public int age;
        public User(string name, int age)
        {
            this.name = name;
            this.age = age;
        }
        public void DisplayInfo()
        {
            Console.WriteLine($"Name: {name}  Age: {age}");
        }
    }
 
    class Program
    {
        static void Main(string[] args)
        {
            User tom = new User("Tom", 34);
            tom.DisplayInfo();
 
            User bob = new User();
            bob.DisplayInfo();
             
            Console.ReadKey();
        }
    }
}

Важно учитывать, что если мы определяем конструктор в структуре, то он должен инициализировать все поля структуры, 
как в данном случае устанавливаются значения для переменных name и age.

Также, как и для класса, можно использовать инициализатор для создания структуры:

User person = new User { name = "Sam", age = 31 };
Но в отличие от класса нельзя инициализировать поля структуры напрямую при их объявлении, например, следующим образом:

struct User
{
    public string name = "Sam";     // ! Ошибка
    public int age = 23;            // ! Ошибка
    public void DisplayInfo()
    {
        Console.WriteLine($"Name: {name}  Age: {age}");
    }
}